% PATIENT : 
%   1 -> 44202.mat
%   2 -> 63502.mat
% ARCHITETURES :
%   shallow -> tansig, purelin, sigmoidal ... softmax
%   1 -> shallow    -> feedfowardnet 
%   2 -> shallow    -> layrecnet (layer Recurrent Network) with delays
% TRAINING STYLE:
%   1 -> incremental learning 
%   2 -> batch learning
% TRAIN FUN:
%   if traningStyle == 1(Incremental):
%       trainFun:
%           trainc
%           trainr
%           LEARN FUN:
%              learngd
%              learngdm
%   
%   if trainingStyle == 2(batch):
%       trainFun:
%           traingd
%           traingdm
%           trainlm
%

function [sens_pred, spec_pred, sens_det, spec_det] = shallowClassify(patient,hasBalance, hasEW, hasEnconding, architeture, trainingStyle , ...
                                  trainFun, learnFun, numLayers, numHiddenNeurons, actFun1, actFun2, actFun3, hasSoftmax)
    file_name = "../models/classifiers/";

    % Choosing patient A or B
    if(patient == 1)
        FeatVectSel=load("../dataset/44202.mat","FeatVectSel");
        Trg=load("../dataset/44202.mat","Trg");
        % load '../dataset/44202.mat' FeatVectSel Trg
        file_name = file_name + "44202_";
    elseif(patient == 2)
        FeatVectSel=load("../dataset/63502.mat","FeatVectSel");
        Trg=load("../dataset/63502.mat","Trg");
        % load '../dataset/63502.mat' FeatVectSel Trg
        file_name = file_name + "63502_";
    end
    P = FeatVectSel;
    T = correctTarget(Trg);
    
    %Has Auto-enconders
    if(hasEnconding)
        if(patient == 1)
            load '../models/autocoender/autoCoender44202.mat' auto
        elseif(patient == 2)
            load '../models/autocoender/autoCoender63502.mat' auto
        end
        file_name = file_name + "AUTO_";
        P = predict(auto,P);
    end

    % Divinding the dataset and target into treino + test
    [data_treino,data_test,target_treino,target_test] = divideDataset(P,T ,0.85);


    % INVERTING P AND T
    data_treino = data_treino';
    target_treino = target_treino';
    data_test = data_test';
    target_test = target_test';

    %balacing train
    if(hasBalance == 1)
        [data_treino, target_treino] = balanceTrainSet(data_treino, target_treino);  
        file_name = file_name + "B";
    end

    %Error weights
    if(hasEW == 1)
        EW = errorWeights(target_treino);
        file_name = file_name + "EW_";
    end
    %-------------------- SHALLOW NETS -------------------- 
    if(architeture == 1 || architeture == 2)
        hiddenLayers = (1:numLayers);
        hiddenLayers(1,:) = numHiddenNeurons;
        
        if(architeture == 1)
            net = feedforwardnet(hiddenLayers , trainFun);
            file_name = file_name + "FF_" + numLayers + "L_" + numHiddenNeurons + "HN_" + trainFun + "_";
        elseif(architeture == 2)
            net = layrecnet(1:2 , hiddenLayers , trainFun);
            file_name = file_name + "DELAY_" + numLayers + "L_" + numHiddenNeurons + "HN_" + trainFun + "_";
        end
      
        if(trainingStyle == 1)
            net.adaptFcn = learnFun;
            file_name = file_name + learnFun + "_";
        end

        %activation 
        if(numLayers == 1)
            net.layers{1}.transferFcn = actFun1;
            file_name = file_name + actFun1;
            if(hasSoftmax)
                net.layers{2}.transferFcn = "softmax";
                file_name = file_name + "_softmax";
            end
        elseif(numLayers == 2)
            net.layers{1}.transferFcn = actFun1;
            net.layers{2}.transferFcn = actFun2;
            file_name = file_name + actFun1 + "_" + actFun2;
            if(hasSoftmax)
                net.layers{3}.transferFcn = "softmax";
                file_name = file_name + "_softmax";
            end
        elseif(numLayers == 3)
            net.layers{1}.transferFcn = actFun1;
            net.layers{2}.transferFcn = actFun2;
            net.layers{3}.transferFcn = actFun3;
            file_name = file_name + actFun1 + "_" + actFun2 + "_" + actFun3;
            if(hasSoftmax)
                net.layers{4}.transferFcn = "softmax";
                file_name = file_name + "_softmax";
            end
        end
        
        net.trainParam.epochs = 1000;

        file_name = file_name + ".mat";
        if(hasEW)
            net = train(net, data_treino,target_treino,[],[],EW);
        else
            net = train(net, data_treino,target_treino);
        end

        save(file_name,"net");
        result = net(data_test);
        view(net);
 
        [~,result] = max(result);
        [~,target_test] = max(target_test);
        % [sensitivity_pred, specifit_pred] = prediction(result, target_test);
        % [sensitivity_dec, specifit_dec] = detection(result, target_test);
        [sens_pred, spec_pred, sens_det, spec_det] = confMatrix(result, target_test)


    end


end
